/* Generated by re2c 2.0.3 on Fri Apr  9 19:15:23 2021 */

/*
 * This file is part of gas
 *
 * Copyright (C) 2017-2020 OpenSiege Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "FuelParser.hpp"
#include "gas/FuelScanner.hpp"

namespace ehb
{
    int FuelScanner::scan(std::string * yylval)
    {
        #define YYCTYPE char
        #define YYCURSOR cursor
        #define YYLIMIT limit
        #define YYMARKER marker
        #define YYFILL(n)

        #define yytext std::string(start, cursor - start)

        while (1)
        {
            const char * start = cursor;

            if (state.empty())
            {
                /*
                 * HACK: line 35 of ui/interfaces/backend/console_output/console_output.gas: [t:window;n:rollover_console]
                 * there is a typo here as the ';' should be a ','
                 */

                
{
	unsigned char yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	switch (yych) {
	case 0x00:	goto yy2;
	case '\t':
	case '\r':
	case ' ':	goto yy6;
	case '\n':	goto yy9;
	case '*':
	case '-':
	case '.':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy12;
	case ',':	goto yy15;
	case '/':	goto yy17;
	case ':':	goto yy18;
	case ';':	goto yy20;
	case '=':	goto yy22;
	case '[':	goto yy24;
	case ']':	goto yy26;
	case '{':	goto yy28;
	case '}':	goto yy30;
	default:	goto yy4;
	}
yy2:
	++YYCURSOR;
	{ return 0; }
yy4:
	++YYCURSOR;
yy5:
	{ std::cerr << "unexpected character found: '" << start[0] << "' (" << static_cast<int>(start[0]) << ")" << std::endl; return 0; }
yy6:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	switch (yych) {
	case '\t':
	case '\r':
	case ' ':	goto yy6;
	default:	goto yy8;
	}
yy8:
	{ continue; }
yy9:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	switch (yych) {
	case '\n':	goto yy9;
	default:	goto yy11;
	}
yy11:
	{ continue; }
yy12:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	switch (yych) {
	case '*':
	case '-':
	case '.':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy12;
	default:	goto yy14;
	}
yy14:
	{ return (*yylval = yytext, FuelParser::token::Identifier); }
yy15:
	++YYCURSOR;
	{ return ','; }
yy17:
	yych = *++YYCURSOR;
	switch (yych) {
	case '*':	goto yy32;
	case '/':	goto yy34;
	default:	goto yy5;
	}
yy18:
	++YYCURSOR;
	{ return ':'; }
yy20:
	++YYCURSOR;
	{ return ','; }
yy22:
	++YYCURSOR;
	{ state.push(expression_statement); return '='; }
yy24:
	++YYCURSOR;
	{ return '['; }
yy26:
	++YYCURSOR;
	{ return ']'; }
yy28:
	++YYCURSOR;
	{ return '{'; }
yy30:
	++YYCURSOR;
	{ return '}'; }
yy32:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	switch (yych) {
	case '*':	goto yy37;
	default:	goto yy32;
	}
yy34:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	switch (yych) {
	case 0x00:
	case '\n':
	case '\r':	goto yy36;
	default:	goto yy34;
	}
yy36:
	{ continue; }
yy37:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	switch (yych) {
	case '/':	goto yy38;
	default:	goto yy32;
	}
yy38:
	++YYCURSOR;
	{ continue; }
}

            }
            else if (state.top() == embedded_statement)
            {
                
{
	unsigned char yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	switch (yych) {
	case '\t':
	case '\n':
	case '\r':
	case ' ':	goto yy44;
	case '/':	goto yy46;
	case ']':	goto yy47;
	default:	goto yy42;
	}
yy42:
	++YYCURSOR;
yy43:
	{ return (*yylval = yytext, FuelParser::token::Expression); }
yy44:
	++YYCURSOR;
	{ return (*yylval = yytext, FuelParser::token::Expression); }
yy46:
	yych = *++YYCURSOR;
	switch (yych) {
	case '/':	goto yy48;
	default:	goto yy43;
	}
yy47:
	yych = *++YYCURSOR;
	switch (yych) {
	case ']':	goto yy51;
	default:	goto yy43;
	}
yy48:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	switch (yych) {
	case 0x00:
	case '\n':
	case '\r':	goto yy50;
	default:	goto yy48;
	}
yy50:
	{ continue; }
yy51:
	++YYCURSOR;
	{ state.pop(); return (*yylval = yytext, FuelParser::token::Expression); }
}


            }
            else if (state.top() == expression_statement)
            {
                
{
	unsigned char yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	switch (yych) {
	case '\t':
	case '\n':
	case '\r':
	case ' ':	goto yy57;
	case '"':	goto yy59;
	case '/':	goto yy61;
	case ';':	goto yy62;
	case '[':	goto yy64;
	default:	goto yy55;
	}
yy55:
	++YYCURSOR;
yy56:
	{ return (*yylval = yytext, FuelParser::token::Expression); }
yy57:
	++YYCURSOR;
	{ return (*yylval = yytext, FuelParser::token::Expression); }
yy59:
	++YYCURSOR;
	{ state.push(string_literal); return (*yylval = yytext, FuelParser::token::Expression); }
yy61:
	yych = *++YYCURSOR;
	switch (yych) {
	case '/':	goto yy65;
	default:	goto yy56;
	}
yy62:
	++YYCURSOR;
	{ state.pop(); return ';'; }
yy64:
	yych = *++YYCURSOR;
	switch (yych) {
	case '[':	goto yy68;
	default:	goto yy56;
	}
yy65:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	switch (yych) {
	case 0x00:
	case '\n':
	case '\r':	goto yy67;
	default:	goto yy65;
	}
yy67:
	{ continue; }
yy68:
	++YYCURSOR;
	{ state.push(embedded_statement); return (*yylval = yytext, FuelParser::token::Expression); }
}


            }
            else if (state.top() == string_literal)
            {
                
{
	unsigned char yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	switch (yych) {
	case '\t':
	case '\n':
	case '\r':
	case ' ':	goto yy74;
	case '"':	goto yy76;
	case '\\':	goto yy78;
	default:	goto yy72;
	}
yy72:
	++YYCURSOR;
yy73:
	{ return (*yylval = yytext, FuelParser::token::Expression); }
yy74:
	++YYCURSOR;
	{ return (*yylval = yytext, FuelParser::token::Expression); }
yy76:
	++YYCURSOR;
	{ state.pop(); return (*yylval = yytext, FuelParser::token::Expression); }
yy78:
	yych = *++YYCURSOR;
	switch (yych) {
	case '.':	goto yy79;
	default:	goto yy73;
	}
yy79:
	++YYCURSOR;
	{ return (*yylval = yytext, FuelParser::token::Expression); }
}


            }

            assert(false);

        }
    }
}
