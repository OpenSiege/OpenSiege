
#include "Platform.hpp"

#include <osg/GraphicsContext>
#include <osg/GL2Extensions>
#include <osg/Version>
#include <osgViewer/Version>

#include <spdlog/spdlog.h>

namespace ehb
{
    const std::string Platform::Git::GIT_SHA1 = "@GIT_SHA1@";
    const std::string Platform::Git::GIT_BRANCH = "@GIT_BRANCH@";

    Platform::Platform()
    {
        const int length = wai_getExecutablePath(nullptr, 0, nullptr);
        std::string exe(length, '\0');
        wai_getExecutablePath(exe.data(), length, nullptr);

        mExePath = std::move(exe);
    }

    Platform &Platform::instance()
    {
        static Platform platform;
        return platform;
    }

    // shamelessly from osgEarth: https://github.com/gwaldron/osgearth/blob/master/src/osgEarth/Capabilities.cpp
    void Platform::generateCapabilities()
    {
    #if 0
        static bool hasBeenRun = false;
        if (!hasBeenRun)
        {
            // we could probably utilize the graphics context when we start the game
            auto log = spdlog::get("game");

            capabilities.numProcessors = std::thread::hardware_concurrency();

            osg::GraphicsContext::ScreenIdentifier si;
	        si.readDISPLAY();
	        si.setUndefinedScreenDetailsToDefaultScreen();

            osg::ref_ptr<osg::GraphicsContext::Traits> traits = new osg::GraphicsContext::Traits;
    	    traits->hostName = si.hostName;
	        traits->displayNum = si.displayNum;
	        traits->screenNum = si.screenNum;
            traits->x = 0;
            traits->y = 0;
            traits->width = 1;
            traits->height = 1;
            traits->windowDecoration = false;
            traits->doubleBuffer = false;
            traits->sharedContext = 0;
            traits->pbuffer = false;
            traits->glContextVersion = osg::DisplaySettings::instance()->getGLContextVersion();
            traits->glContextProfileMask = osg::DisplaySettings::instance()->getGLContextProfileMask();

            osg::ref_ptr<osg::GraphicsContext> gc = osg::GraphicsContext::createGraphicsContext(traits.get());

            if (gc.valid())
            {
                gc->realize();
                gc->makeCurrent();

                uint32_t id = gc->getState()->getContextID();

                const osg::GL2Extensions* GL2 = osg::GL2Extensions::Get(id, true);

                log->info("OSG Version:      {}", osgGetVersion());

                log->info("Detected hardware capabilities:");

                capabilities.vendor = std::string(reinterpret_cast<const char*>(glGetString(GL_VENDOR)));
                log->info("  Vendor = {}", capabilities.vendor);

                capabilities.renderer = std::string(reinterpret_cast<const char*>(glGetString(GL_RENDERER)));
                log->info("  Renderer = {}", capabilities.renderer);

                capabilities.version = std::string(reinterpret_cast<const char*>(glGetString(GL_VERSION)));
                log->info("  Version = {}", capabilities.version);

                capabilities.supportsGLSL = GL2->isGlslSupported;
                if (capabilities.supportsGLSL)
                {
                    capabilities.GLSLversion = GL2->glslLanguageVersion;
                    log->info("  GLSLVersion = {}", capabilities.GLSLversion);
                }
            }

            hasBeenRun = true;
        }
    #endif
    }

    const std::string& Platform::getExecutablePath() const
    {
        return mExePath;
    }
}